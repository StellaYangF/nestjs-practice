## 一、[官网地址](https://docs.nestjs.com/cli/overview)

## `nest-cli`的基本使用

* 1、安装脚手架

  ```shell
  npm install -g @nestjs/cli
  ```

* 2、查看脚手架的版本

  ```shell
  nest -v
  ```

* 3、查看全部的命令(不记得使用命令创建文件的时候可以使用)
  > 根据下面打星多少来表示项目开中使用频率

  ```shell
  nest-book git:(master) nest   # 输入的命令
  Usage: nest <command> [options]

  Options:
    -v, --version                                   查看当前nestjs-cli的版本
    -h, --help                                      查看帮助

  Commands:
    new|n [options] [name]                          生成一个新的项目
    build [options] [app]                           构建一个项目
    start [options] [app]                           运行项目
    info|i                                          显示项目的具体信息
    update|u [options]                              升级之前的依赖包
    add [options] <library>                         将对外部库的支持添加到项目中。

    generate|g [options] <schematic> [name] [path]  Generate a Nest element.
      Available schematics:
        全称              别名(一般我们使用别名就可以)
        ┌───────────────┬─────────────┐
        │ name          │ alias       │
        │ application   │ application │
        │ class         │ cl          │
        │ configuration │ config      │
        │ controller    │ co          │            ** 控制器
        │ decorator     │ d           │            * 装饰器
        │ filter        │ f           │            * 过滤器
        │ gateway       │ ga          │            网关
        │ guard         │ gu          │            * 守卫
        │ interceptor   │ in          │            * 拦截器
        │ interface     │ interface   │            接口
        │ middleware    │ mi          │            中间层  
        │ module        │ mo          │            ** 模块
        │ pipe          │ pi          │            * 管道
        │ provider      │ pr          │
        │ resolver      │ r           │            graphql使用相当于上面的控制器
        │ service       │ s           │            ** 创建服务
        │ library       │ lib         │
        │ sub-app       │ app         │
        └───────────────┴─────────────┘
  ```

* 4、使用脚手架命令创建文件(控制器、服务层、模块)的时候会自动生成一个`spec`的测试文件,如果不想需要,可以加上参数

  ```shell
  nest g mo user [--no-spec]
  ```

* 5、创建一个`module`

  ```shell
  nest g mo user
  ```

* 6、创建一个控制器

  ```shell
  nest g co user
  nest g co user --no-spec # 创建不带测试文件的
  # 创建的会自动更新到user.module中(前提是你先创建了module)
  ```

* 7、创建一个服务层

  ```shell
  nest g s user 
  ```
  